%Para todas las formulas de primeras derivadas
f=0; c=0; h=0;
aprox = 0;
exacto = double(subs(diff(f),c));
error = double(abs(exacto-aprox));
%Primeras Derivadas - Formula de 2 puntos (Para tener un error mas pequeño
%hay que utilizar un h mas pequeño o una formula con mas puntos
%Progresiva
aprox = double((subs(f, c+h)-subs(f,c))/h);
%Regresiva
aprox = double((subs(f, c)-subs(f,c-h))/h);
%Primeras Derivadas - Formula de 3 puntos
%progresiva
aprox = double((-3*subs(f,c)+4*subs(f,c+h)-subs(f,c+2*h))/(2*h));
%Centrada
aprox = double((-subs(f,c-h)+subs(f,c+h))/(2*h));
%Regresiva
aprox = double((3*subs(f,c)-4*subs(f,c-h)+subs(f,c-2*h))/(2*h));
%Primeras Derivadas - Formula de 5 puntos
%Progresiva
aprox = double((-25*subs(f,c)+48*subs(f,c+h)-36*subs(f,c+2*h)+16*subs(f,c+3*h)-3*subs(f,c+4*h))/(12*h));
%Centrada
aprox = double((subs(f,c-2*h)-8*subs(f,c-h)+8*subs(f,c+h)-subs(f,c+2*h))/(12*h));
%Regresiva
aprox = double((25*subs(f,c)-48*subs(f,c-h)+36*subs(f,c-2*h)-16*subs(f,c-3*h)+3*subs(f,c-4*h))/(12*h));
%Para todas las formulas de segundas derivadas
f=0; c=0; h=0;
aprox = 0;
exacto = double(subs(diff(f,2),c));
error = double(abs(exacto-aprox));
%Segundas Derivadas - Formula de 3 puntos
%Progresiva
aprox = double((subs(f,c)-2*subs(f,c+h)+subs(f,c+2*h))/(h^2));
%Centrada
aprox = double((subs(f,c-h)-2*subs(f,c)+subs(f,c+h))/(h^2));
%Regresiva
aprox = double((subs(f,c-2*h)-2*subs(f,c-h)+subs(f,c))/(h^2));
%Extrapolación de Richardson
f=0; c=0; h=0;
aprox = N(1,n);%Despues de haber hecho todo el proceso
exacto = double(subs(diff(f),c));
error = double(abs(exacto-aprox));
N=zeros(n);%n es el valor que dan en el ejercicio, es el subindice de N
%Copiar el for en consola linea por linea o ahcer un archivo .m
for i=1:n %Este for es para la primera columna
    N(i,1)=(-subs(f,c-h)+subs(f,c+h))/(2*h);
    h=h/2;
end
for j=2:n %For para todas las demas columnas
    for i=1:n-j+1
        N(i,j)=(4^(j-1)*N(i+1,j-1)-N(i,j-1))/(4^(j-1)-1);
    end
end

%Integración Numérica
%Fórmulas de Newton-Cotes
f=0;
exacto=double(int(f,a,b));
error=abs(exacto-aprox);
ErrorPorcentual=error/exacto;
a=0; b=0; %Estos son los valores de los limites
%Regla del trapecio (? = ?)
h=b-a; x0=a; x1=b;
aprox=(h/2)*(subs(f,x0)+subs(f,x1));
%Regla de Simpson (? = ?)
h=(b-a)/2; x0=a; x1=a+h; x2=b;
aprox=(h/3)*(subs(f,x0)+4*subs(f,x1)+subs(f,x2));
%Regla de 3/8 de Simpson (? = ?)
h=(b-a)/3; x0=a; x1=a+h; x2=a+2*h; x3=b;
aprox=(3*h/8)*(subs(f,x0)+3*subs(f,x1)+3*subs(f,x2)+subs(f,x3));
%Regla de Boole (? = ?)
h=(b-a)/4; x0=a; x1=a+h; x2=a+2*h; x3=a+3*h; x4=b;
aprox=(2*h/45)*(7*subs(f,x0)+32*subs(f,x1)+12*subs(f,x2)+32*subs(f,x3)+7*subs(f,x4));
%n = 5
h=(b-a)/5; x0=a; x1=a+h; x2=a+2*h; x3=a+3*h; x4=a+4*h; x5=b;
aprox=(5*h/288)*(19*subs(f,x0)+75*subs(f,x1)+50*subs(f,x2)+50*subs(f,x3)+75*subs(f,x4)+19*subs(f,x5));
%n = 6
h=(b-a)/5; x0=a; x1=a+h; x2=a+2*h; x3=a+3*h; x4=a+4*h; x5=a+5*h; x6=b;
aprox=(h/140)*(41*subs(f,x0)+216*subs(f,x1)+27*subs(f,x2)+272*subs(f,x3)+27*subs(f,x4)+216*subs(f,x5)+41*subs(f,x6));

%Trapecio Compuesto, las igualadas a cero se ingresan manuales
f=0; n=0; a=0; b=0; h=(b-a)/n; sumatoria=0;
for i=1:n-1
   sumatoria=sumatoria+subs(f,(a+i*h));
end
aprox=double((h/2)*(subs(f,a)+(2*sumatoria)+subs(f,b)));
exacto=double(int(f,a,b));
error=double(abs(aprox-exacto));
Porcentual=100*(error/exacto);

%Simpson Compuesto, las igualadas a cero se ingresan manuales
f=0; n=0; a=0; b=0; h=(b-a)/n;
for i=1:n
   z=a+(i)*h;
end
sum1=0; sum2=0;
for i=1:n-1
    y=a+i*h;
    if(mod(i,2)==0)
        sum1 = sum1 + subs(f,y);
    else
        sum2= sum2 + subs(f,y);
    end
end
aprox=double((h/3)* (subs(f,a) + 2*sum1 + 4*sum2 + subs(f,b)));
exacto=double(int(f,a,b));
error=double(abs(aprox-exacto));
Porcentual=100*(error/exacto);

%Metodo de Romberg
f=0; n=0; a=0; b=0; RM=zeros(n,n); h=0;
for j=1:n
    h(j)=(b-a)/(2^(j-1));
end
RM(1,1)=(h(1)/2)*(subs(f,a)+subs(f,b));

for j=2:n
    Sum=0;
    for i=1:(2^(j-2))
        c=(a+((2*i-1)*h(j)));
        Sum=Sum+subs(f,c);
    end
    RM(j,1)=(1/2)*(RM(j-1,1)+h(j-1)*Sum);
end
for j=2:n
    for i=j:n
        RM(i,j)=RM(i,j-1) + (RM(i,j-1)-RM(i-1,j-1))/((4^(j-1))-1);
    end
end
for j=1:n %Esto for es solo para imprimir, no es necesario
    for i=j:n
        if j==1&&i==1
            fprintf('R(1,1)=h1/2[fa+fb]=%9.8f\n',RM(1,1))
        elseif j==1&&i>1
            fprintf('R(%1.0f,1)=(1/2)[R(%1.0f,1)+h%1.0f SumF(a+(2i-1)h%1.0f]=%9.8f\n',i,i-1,i-1,i,RM(i,1))
        else
        fprintf('R(%1.0f,%1.0f)=R(%1.0f,%1.0f)+R(%1.0f,%1.0f)-R(%1.0f,%1.0f)/(4^(%1.0f-1)-1)=%9.8f\n',i,j,i,j-1,i,j-1,i-1,j-1,j,RM(i,j))
        end
    end
end
RM
aprox=RM(n,n);
exacto=double(int(f,a,b));
error=abs(exacto-aprox);

%Cuadratura Gaussiana
p3=x^3-3/5*x; p4=x^4-6/7*x^2+3/35; p5=x^5-10/9*x^3+5/21*x; p6=x^6-15/11*x^4+5/11*x^2-5/231;
p7=x^7-21/13*x^5+105/143*x^3-35/429*x; p8=x^8-28/15*x^6+14/13*x^4-28/143*x^2+7/1287;
%Comenzar desde aca
p=0; f=0; n=0; a=0; b=0;%la n y la p van a ser iguales, en p van a poner las ecuaciones de arriba segun ejercicio
r=double(solve(p));%Aca se pondra la p dependiendo de lo que pide el ejercicio
dp=diff(p);
for i=1:n
    c=int(p/(x-r(i)));
    w(i)=(1/subs(dp,r(i)))*(subs(c,1)-subs(c,-1));
end
syms t
fx=(1/2)*((b-a)*t+ (a+b));
dx=(1/2)*(b-a);
g=subs(f,fx);
g=g*dx;
aprox=0;
for i=1:n
    aprox=aprox+(w(i)*subs(g,r(i)));
end
double(aprox);
exacto=double(int(f,a,b));

%Integración Multiple
syms x y;
f=0; a=0; b=0; c=0; d=0; %a,b son limites externos (Numeros) c,d limites internos (Pueden ser funciones)
n=0; hi=(d-c)/n; he=(b-a)/n;
%Aplicando compuesta de simpson a la integra interna
sum1=0; sum2=0;
for i=1:n-1
    z=c+i*hi;
    if(mod(i,2)==0)
        sum1 = sum1 + subs(f,y,z);%Acá la y puede cambiar por x, depende de quien sea la integral interna
    else
        sum2= sum2 + subs(f,y,z);%En este caso y es la integral interna pero puede cambiar depende del ejercicio
    end
end
g=pretty(simplify((hi/3)* (subs(f,y,c) + 2*sum1 + 4*sum2 + subs(f,y,d))));
%Aplicando compuesta de simpson a la integral externa
sum1=0; sum2=0;
for i=1:n-1
    z=a+i*he;
    if(mod(i,2)==0)
        sum1 = sum1 + subs(g,z);%Acá la y puede cambiar por x, depende de quien sea la integral interna
    else
        sum2= sum2 + subs(g,z);%En este caso y es la integral interna pero puede cambiar depende del ejercicio
    end
end
aprox=double((he/3)* (subs(g,a) + 2*sum1 + 4*sum2 + subs(g,b)));
exacto=double(int(int(f,y,c,d),a,b));%Acá la y puede cambiar por x, depende de quien sea la integral interna

%Integral Multiple con trapecio compuesto
syms x y;
f=0; a=0; b=0; c=0; d=0; %a,b son limites externos (Numeros) c,d limites internos (Pueden ser funciones)
n=0; hi=(d-c)/n; he=(b-a)/n; sumatoria=0;
%Aplicando trapecio compuesto a la integral interna
for i=1:n-1
   sumatoria=sumatoria+subs(f,y,(c+i*hi));
end
g=(hi/2)*(subs(f,y,c)+(2*sumatoria)+subs(f,y,d));% La y puede cambiar, depende de quien sea la interna
%Aplicando trapecio compuesto a la integral externa
sumatoria=0;
for i=1:n-1
   sumatoria=sumatoria+subs(g,x,(a+i*he));
end
aprox=double((he/2)*(subs(g,x,a)+(2*sumatoria)+subs(g,x,b)));
exacto=double(int(int(f,y,c,d),a,b));


%Formulas de ayuda
%Trabajo
w=densidad*gravedad*dv*deltax; dv=da*dy;
%Fuerza
F=P*A; dA=formulaarea*dy; P=densidad*gravedad*h;
%Longitud de arco
L= IntegraldeAaB(sqrt(1+derivada(x))^2)*dx;
%Volumen de solido de revolucion
V=integralab(pi*((Rint)^2-(Rext)^2))*dx;
%Area de una superficie
A=2*pi*(integralab(funcion*sqrt(1+derivadadeXalcuadrado)*dx));
%Momento de inercia con respecto a equis
Ix=Integraldoble(y^2*funciondensidad(x,y) *dA);
%Momento de inercia con respecto a Y
Iy=Integraldoble(x^2*funciondensidad(x,y)*dA);
%Momento de inercia con respecto a Y
Io=Integraldoble((x^2+y^2)*funciondensidad(x,y)*dA);
